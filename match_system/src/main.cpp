// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "match_server/Match.h"
#include "save_client/Save.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>
#include <thrift/transport/TSocket.h>
#include <thrift/transport/TTransportUtils.h>

#include <iostream>
#include <thread>       // 多线程
#include <mutex>        // 锁 -> 用来实现消息队列
#include <condition_variable>   // 条件变量，配合锁可以更容易地实现消息队列
// 条件变量的作用：对锁进行封装
#include <queue>        // 可以用锁和条件变量将普通队列包装成消息队列
#include <vector>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using namespace ::match_service;
using namespace ::save_service;

struct Task {
    User user;
    std::string type;
};

struct MessageQueue {
    std::queue<Task> q;
    std::mutex m;
    std::condition_variable cv;
}message_queue;

class Pool {
    public:
        void save_result(int a, int b) {
            printf("Match Result: %d %d\n", a, b);



            std::shared_ptr<TTransport> socket(new TSocket("123.57.47.211", 9090));
            std::shared_ptr<TTransport> transport(new TBufferedTransport(socket));
            std::shared_ptr<TProtocol> protocol(new TBinaryProtocol(transport));
            SaveClient client(protocol);

            try {
                transport->open();

                int ans = client.save_data("acs_1985", "fa1ca971", a, b);
                if (!ans) puts("success");
                else puts("failed");

                transport->close();
            } catch (TException& tx) {
                std::cout << "ERROR: " << tx.what() << std::endl;
            }



        }
        void match() {
            while (users.size() > 1) {
                auto a = users[0], b = users[1];
                users.erase(users.begin());
                users.erase(users.begin());

                save_result(a.id, b.id);
            }
        }
        void add(User user) {
            users.push_back(user);
        }
        void remove(User user) {
            for (uint32_t i = 0; i < users.size(); i++) {
                if (users[i].id == user.id) {
                    users.erase(users.begin() + i);
                    break;
                }
            }
        }
    private:
        std::vector<User> users;
}pool;


class MatchHandler : virtual public MatchIf {
    public:
        MatchHandler() {
            // Your initialization goes here
        }

        int32_t add_user(const User& user, const std::string& info) {
            // Your implementation goes here
            printf("add_user\n");


            // 用message_queue里的锁m上锁，这样写有个好处，不用显示解锁，因为当函数执行完的时候，这个锁会自动打开
            std::unique_lock<std::mutex> lck(message_queue.m);
            message_queue.q.push({user, "add"});
            message_queue.cv.notify_all();  // 唤醒所有被条件变量卡住的线程

            return 0;
        }

        int32_t remove_user(const User& user, const std::string& info) {
            // Your implementation goes here
            printf("remove_user\n");


            // 用message_queue里的锁m上锁，这样写有个好处，不用显示解锁，因为当函数执行完的时候，这个锁会自动打开
            std::unique_lock<std::mutex> lck(message_queue.m);
            message_queue.q.push({user, "remove"});
            message_queue.cv.notify_all();

            return 0;
        }

};

void consume_task() {
    while (true) {
        std::unique_lock<std::mutex> lck(message_queue.m);
        if (message_queue.q.empty()) {
            message_queue.cv.wait(lck);
        } else {
            auto task = message_queue.q.front();
            message_queue.q.pop();
            lck.unlock();

            // do task
            if (task.type == "add") {
                pool.add(task.user);
            } else if (task.type == "remove") {
                pool.remove(task.user);
            }
            pool.match();
        }
    }
}



int main(int argc, char **argv) {
    int port = 9090;
    ::std::shared_ptr<MatchHandler> handler(new MatchHandler());
    ::std::shared_ptr<TProcessor> processor(new MatchProcessor(handler));
    ::std::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
    ::std::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
    ::std::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

    TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);


    std::cout << "Start Match Server" << std::endl;

    std::thread matching_thread(consume_task);


    server.serve();
    return 0;
}

